# coding:utf-8
import random

def produce_axis(m, n):
    x_str =[]
    y_str = []
    for i in range(1, m+1):
        # print i
        temp = str(i)
        # print   "'" + temp + "'"
        x_str.append(temp)
    for j in range(1, n+1):
        # print j
        temp = str(j)
        # print "'" + temp + "'"
        y_str.append(temp)
        # y_str = y_str, "'".temp"'",

    return x_str, y_str



# print produce_axis(30, 30)[0]
# print produce_axis(30, 30)[1]
# http://echarts.baidu.com/demo.html#heatmap-cartesian

print produce_axis(35, 40)[0]
print produce_axis(35, 40)[1]



lst1 = [1, 2, 3]
lst2 = []
# lst_tmp = []
for i in range(1, 36):
    for j in range(1, 41):
        lst_tmp = []
        lst_tmp.append(i)
        lst_tmp.append(j)
        lst_tmp.append(0)
        lst2.append(lst_tmp)
        # lst_tmp = null
print lst2


for i in lst2:
    i[0] -= 1
    i[1] -= 1
    if i[0] == i[1]:
        i[2] = 10 - random.randint(0, 2)
    else:
        # i[2] = 4 + random.randint(0, 2)
        # i[2] = int((30 - abs(i[0]-i[1]))/3) + random.randint(0, 5) - random.randint(0, 5)
        # if i[2] >= 10:
        #     i[2] -= 4
        # if i[2] <= 0:
        #     i[2] += 6
        i[2] += random.randint(0, 9)
        if i[2] >= 7:
            i[2] -= random.randint(0, 3)

print lst2


# 35


def produce_density(n, above=1, below=0, scale=1):
    """
  [
        [10.0, 8.04],
        [8.0, 6.95],
        [13.0, 7.58],
        [9.0, 8.81],
        [11.0, 8.33],
        [14.0, 9.96],
        [6.0, 7.24],
        [4.0, 4.26],
        [12.0, 10.84],
        [7.0, 4.82],
        [5.0, 5.68]
    ]
"""
    # for i in range(0, 10):

    res_lst = []
    for i in range(0, n+1):
        tmp_lst = []
        tmp_lst.append(i)
        density = random.random()*scale
        if density <= below:
            density += below
        if density >= above:
            density = density - (density - above) - random.random()/10
        tmp_lst.append(density)
        res_lst.append(tmp_lst)
    return res_lst

print produce_density(40, above=1.5, scale=1.5, below=0.92)
# print produce_density(40)
# print produce_density(40)
# print produce_density(40)



"""
app.title = '笛卡尔坐标系上的热力图';

var hours = ['1', '2', '3', '4', '5', '6', '7',
        '8', '8a', '9a','10a','11a',
        '12p', '1p', '2p', '3p', '4p', '5p',
        '6p', '7p', '8p', '9p', '10p', '11p'];
var days = ['1', '2', '3',
        'Wednesday', 'Tuesday', 'Monday', 'Sunday'];

var data = [[0,0,5],[0,1,1],[0,2,0],[0,3,0],[0,4,0],[0,5,0],[0,6,0],[0,7,0],[0,8,0],[0,9,0],[0,10,0],[0,11,2],[0,12,4],[0,13,1],[0,14,1],[0,15,3],[0,16,4],[0,17,6],[0,18,4],[0,19,4],[0,20,3],[0,21,3],[0,22,2],[0,23,5],[1,0,7],[1,1,0],[1,2,0],[1,3,0],[1,4,0],[1,5,0],[1,6,0],[1,7,0],[1,8,0],[1,9,0],[1,10,5],[1,11,2],[1,12,2],[1,13,6],[1,14,9],[1,15,11],[1,16,6],[1,17,7],[1,18,8],[1,19,12],[1,20,5],[1,21,5],[1,22,7],[1,23,2],[2,0,1],[2,1,1],[2,2,0],[2,3,0],[2,4,0],[2,5,0],[2,6,0],[2,7,0],[2,8,0],[2,9,0],[2,10,3],[2,11,2],[2,12,1],[2,13,9],[2,14,8],[2,15,10],[2,16,6],[2,17,5],[2,18,5],[2,19,5],[2,20,7],[2,21,4],[2,22,2],[2,23,4],[3,0,7],[3,1,3],[3,2,0],[3,3,0],[3,4,0],[3,5,0],[3,6,0],[3,7,0],[3,8,1],[3,9,0],[3,10,5],[3,11,4],[3,12,7],[3,13,14],[3,14,13],[3,15,12],[3,16,9],[3,17,5],[3,18,5],[3,19,10],[3,20,6],[3,21,4],[3,22,4],[3,23,1],[4,0,1],[4,1,3],[4,2,0],[4,3,0],[4,4,0],[4,5,1],[4,6,0],[4,7,0],[4,8,0],[4,9,2],[4,10,4],[4,11,4],[4,12,2],[4,13,4],[4,14,4],[4,15,14],[4,16,12],[4,17,1],[4,18,8],[4,19,5],[4,20,3],[4,21,7],[4,22,3],[4,23,0],[5,0,2],[5,1,1],[5,2,0],[5,3,3],[5,4,0],[5,5,0],[5,6,0],[5,7,0],[5,8,2],[5,9,0],[5,10,4],[5,11,1],[5,12,5],[5,13,10],[5,14,5],[5,15,7],[5,16,11],[5,17,6],[5,18,0],[5,19,5],[5,20,3],[5,21,4],[5,22,2],[5,23,0],[6,0,1],[6,1,0],[6,2,0],[6,3,0],[6,4,0],[6,5,0],[6,6,0],[6,7,0],[6,8,0],[6,9,0],[6,10,1],[6,11,0],[6,12,2],[6,13,1],[6,14,3],[6,15,4],[6,16,0],[6,17,0],[6,18,0],[6,19,0],[6,20,1],[6,21,2],[6,22,2],[6,23,6]];

data = data.map(function (item) {
    return [item[1], item[0], item[2] || '-'];
});

option = {
    tooltip: {
        position: 'top'
    },
    animation: false,
    grid: {
        height: '50%',
        y: '10%'
    },
    xAxis: {
        type: 'category',
        data: hours,
        splitArea: {
            show: true
        }
    },
    yAxis: {
        type: 'category',
        data: days,
        splitArea: {
            show: true
        }
    },
    visualMap: {
        min: 0,
        max: 10,
        calculable: true,
        orient: 'horizontal',
        left: 'center',
        bottom: '15%'
    },
    series: [{
        name: 'Punch Card',
        type: 'heatmap',
        data: data,
        label: {
            normal: {
                show: true
            }
        },
        itemStyle: {
            emphasis: {
                shadowBlur: 10,
                shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
        }
    }]
};
"""


"""
var dataAll = [
    [[0, 0.07464993794866781], [1, 0.47269723480135184], [2, 0.6270127134275254], [3, 0.4580703092160787], [4, 0.124272876906526], [5, 0.610951058924881], [6, 0.3959081370441071], [7, 0.7715623284758045], [8, 0.3037452009336692], [9, 0.7094574478962243], [10, 0.5557918625708352], [11, 0.60041542385962], [12, 0.9742080316313984], [13, 0.3292297348615558], [14, 0.9714219231196012], [15, 0.2912102029020268], [16, 0.9723394994016632], [17, 0.9177188621153156], [18, 0.9495353857852238], [19, 0.19759899475953968], [20, 0.5915578751950474], [21, 0.9010747868701227], [22, 0.3872895537943023], [23, 0.7252248151113441], [24, 0.2752734862538835], [25, 0.380248168512178], [26, 0.4423574569970954], [27, 0.8889651933436372], [28, 0.464542055225065], [29, 0.6341767159834365], [30, 0.9927231483226301], [31, 0.9826789276421682], [32, 0.0975448214062834], [33, 0.4838992742057856], [34, 0.977420614297112], [35, 0.9823074827829817], [36, 0.979317830037963], [37, 0.31297232725401225], [38, 0.11062513866491774], [39, 0.5581100756104524], [40, 0.7156353225929873]]
    ,
    [[0, 0.07464993794866781], [1, 0.47269723480135184], [2, 0.6270127134275254], [3, 0.4580703092160787], [4, 0.124272876906526], [5, 0.610951058924881], [6, 0.3959081370441071], [7, 0.7715623284758045], [8, 0.3037452009336692], [9, 0.7094574478962243], [10, 0.5557918625708352], [11, 0.60041542385962], [12, 0.9742080316313984], [13, 0.3292297348615558], [14, 0.9714219231196012], [15, 0.2912102029020268], [16, 0.9723394994016632], [17, 0.9177188621153156], [18, 0.9495353857852238], [19, 0.19759899475953968], [20, 0.5915578751950474], [21, 0.9010747868701227], [22, 0.3872895537943023], [23, 0.7252248151113441], [24, 0.2752734862538835], [25, 0.380248168512178], [26, 0.4423574569970954], [27, 0.8889651933436372], [28, 0.464542055225065], [29, 0.6341767159834365], [30, 0.9927231483226301], [31, 0.9826789276421682], [32, 0.0975448214062834], [33, 0.4838992742057856], [34, 0.977420614297112], [35, 0.9823074827829817], [36, 0.979317830037963], [37, 0.31297232725401225], [38, 0.11062513866491774], [39, 0.5581100756104524], [40, 0.7156353225929873]]
    ,
    [[0, 0.07464993794866781], [1, 0.47269723480135184], [2, 0.6270127134275254], [3, 0.4580703092160787], [4, 0.124272876906526], [5, 0.610951058924881], [6, 0.3959081370441071], [7, 0.7715623284758045], [8, 0.3037452009336692], [9, 0.7094574478962243], [10, 0.5557918625708352], [11, 0.60041542385962], [12, 0.9742080316313984], [13, 0.3292297348615558], [14, 0.9714219231196012], [15, 0.2912102029020268], [16, 0.9723394994016632], [17, 0.9177188621153156], [18, 0.9495353857852238], [19, 0.19759899475953968], [20, 0.5915578751950474], [21, 0.9010747868701227], [22, 0.3872895537943023], [23, 0.7252248151113441], [24, 0.2752734862538835], [25, 0.380248168512178], [26, 0.4423574569970954], [27, 0.8889651933436372], [28, 0.464542055225065], [29, 0.6341767159834365], [30, 0.9927231483226301], [31, 0.9826789276421682], [32, 0.0975448214062834], [33, 0.4838992742057856], [34, 0.977420614297112], [35, 0.9823074827829817], [36, 0.979317830037963], [37, 0.31297232725401225], [38, 0.11062513866491774], [39, 0.5581100756104524], [40, 0.7156353225929873]]
    ,
    [[0, 0.07464993794866781], [1, 0.47269723480135184], [2, 0.6270127134275254], [3, 0.4580703092160787], [4, 0.124272876906526], [5, 0.610951058924881], [6, 0.3959081370441071], [7, 0.7715623284758045], [8, 0.3037452009336692], [9, 0.7094574478962243], [10, 0.5557918625708352], [11, 0.60041542385962], [12, 0.9742080316313984], [13, 0.3292297348615558], [14, 0.9714219231196012], [15, 0.2912102029020268], [16, 0.9723394994016632], [17, 0.9177188621153156], [18, 0.9495353857852238], [19, 0.19759899475953968], [20, 0.5915578751950474], [21, 0.9010747868701227], [22, 0.3872895537943023], [23, 0.7252248151113441], [24, 0.2752734862538835], [25, 0.380248168512178], [26, 0.4423574569970954], [27, 0.8889651933436372], [28, 0.464542055225065], [29, 0.6341767159834365], [30, 0.9927231483226301], [31, 0.9826789276421682], [32, 0.0975448214062834], [33, 0.4838992742057856], [34, 0.977420614297112], [35, 0.9823074827829817], [36, 0.979317830037963], [37, 0.31297232725401225], [38, 0.11062513866491774], [39, 0.5581100756104524], [40, 0.7156353225929873]]


];

var markLineOpt = {
    animation: false,
    label: {
        normal: {
            formatter: 'y = 1.4 * 0.8',
            textStyle: {
                align: 'right'
            }
        }
    },
    lineStyle: {
        normal: {
            type: 'solid'
        }
    },
    tooltip: {
        formatter: 'y = 1.4 * 0.8'
    },
    data: [[{
        coord: [0, 1.12],
        symbol: 'none'
    }, {
        coord: [40, 1.12],
        symbol: 'none'
    }]]
};

option = {
    title: {
        text: 'Anscombe\'s quartet',
        x: 'center',
        y: 0
    },
    grid: [
        {x: '7%', y: '7%', width: '38%', height: '38%'},
        {x2: '7%', y: '7%', width: '38%', height: '38%'},
        {x: '7%', y2: '7%', width: '38%', height: '38%'},
        {x2: '7%', y2: '7%', width: '38%', height: '38%'}
    ],
    tooltip: {
        formatter: 'Group {a}: ({c})'
    },
    xAxis: [
        {gridIndex: 0, min: 0, max: 40},
        {gridIndex: 1, min: 0, max: 40},
        {gridIndex: 2, min: 0, max: 40},
        {gridIndex: 3, min: 0, max: 40},
    ],
    yAxis: [
        {gridIndex: 0, min: 0, max: 1.5},
        {gridIndex: 1, min: 0, max: 1.5},
        {gridIndex: 2, min: 0, max: 1.5},
        {gridIndex: 3, min: 0, max: 1.5},
    ],
    series: [
        {
            name: 'I',
            type: 'scatter',
            xAxisIndex: 0,
            yAxisIndex: 0,
            data: dataAll[0],
            markLine: markLineOpt
        },
        {
            name: 'II',
            type: 'scatter',
            xAxisIndex: 1,
            yAxisIndex: 1,
            data: dataAll[1],
            markLine: markLineOpt
        },
        {
            name: 'III',
            type: 'scatter',
            xAxisIndex: 2,
            yAxisIndex: 2,
            data: dataAll[2],
            markLine: markLineOpt
        },
        {
            name: 'IV',
            type: 'scatter',
            xAxisIndex: 3,
            yAxisIndex: 3,
            data: dataAll[3],
            markLine: markLineOpt
        }
    ]
};
"""
# http://echarts.baidu.com/demo.html#scatter-anscombe-quartet
